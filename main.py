from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import logging
import os
import shutil
from jobseo_handler import AccountManager
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7624493586:AAEdaydxfLVwKt54A3tNcE3wFQFgQ74j3Yw"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AccountManager
manager = AccountManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    WAITING_LOGIN = State()
    WAITING_PHOTO = State()

# –ö–Ω–æ–ø–∫–∏
def get_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üéØ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_task")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    builder.adjust(1)
    return builder.as_markup()

def get_cancel_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
    return builder.as_markup(resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
async def start_accounts():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    await manager.init_accounts()
    asyncio.create_task(manager.start_work())

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(lambda c: c.data == "get_task")
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    await process_task(callback.message, state)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "stats")
async def show_stats(callback: types.CallbackQuery):
    try:
        active_accounts = len(manager.account_clients)
        queue_size = manager.data_queue.qsize()
        processed_today = manager.processed_today
        
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {active_accounts}\n"
            f"–ó–∞–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_size}\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {processed_today}"
        )
        
        await callback.message.answer(stats_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    await callback.answer()

async def process_task(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å 6 —É—Ç—Ä–∞
        now = datetime.datetime.now().time()
        if now.hour < 6:
            target = datetime.time(6, 0)
            now_datetime = datetime.datetime.now()
            target_datetime = datetime.datetime.combine(now_datetime.date(), target)
            if now_datetime > target_datetime:
                target_datetime += datetime.timedelta(days=1)
                
            wait_seconds = (target_datetime - now_datetime).total_seconds()
            wait_hours = int(wait_seconds // 3600)
            wait_minutes = int((wait_seconds % 3600) // 60)
            
            await message.answer(
                f"‚è≥ –ë–æ—Ç –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç—É –≤ 6 —É—Ç—Ä–∞. –î–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å: "
                f"{wait_hours} —á–∞—Å–æ–≤ {wait_minutes} –º–∏–Ω—É—Ç."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—á–µ—Ä–µ–¥–∏
        if manager.data_queue.empty():
            await message.answer("‚è≥ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        data = await manager.get_parsed_data()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            account=data['account'],
            address=data['address'],
            direction=data['direction'],
            review=data['review']
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∏ –æ—Ç–∑—ã–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await message.answer(f"{data['address']}")
        await message.answer(f"\n\n{data['review']}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω
        await message.answer(
            "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(UserState.WAITING_LOGIN)
        
    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}"
        logger.error(error_msg, exc_info=True)
        await message.answer(error_msg)

@dp.message(UserState.WAITING_LOGIN)
async def process_login(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    login = message.text.strip()
    if login.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        await state.clear()
        await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    await state.update_data(login=login)
    await message.answer(
        "‚úÖ –õ–æ–≥–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(UserState.WAITING_PHOTO)

@dp.message(UserState.WAITING_PHOTO, F.photo)
async def process_photo(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        account_name = data['account']
        login = data['login']
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs("photos", exist_ok=True)
        local_path = f"photos/{file_id}.jpg"
        await bot.download_file(file_path, destination=local_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∏ —Ñ–æ—Ç–æ –≤ @jobseo_bot —á–µ—Ä–µ–∑ AccountManager
        success = await manager.send_review_with_photo(
            account_name, 
            data['review'],
            login,
            local_path
        )
        
        if success:
            await message.answer(
                "‚úÖ –û—Ç–∑—ã–≤ –∏ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É!",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.clear()
            await message.answer('/start')

        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=types.ReplyKeyboardRemove()
            )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
            
    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}"
        logger.error(error_msg)
        await message.answer(error_msg)

@dp.message(UserState.WAITING_PHOTO)
async def wrong_photo_format(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–æ—Ç–æ"""
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–∞.")

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def cancel_task(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await state.clear()
    await message.answer(
        "‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", 
        reply_markup=types.ReplyKeyboardRemove()
    )

async def cleanup_photos():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ"""
    while True:
        await asyncio.sleep(86400)  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
        try:
            shutil.rmtree("photos", ignore_errors=True)
            os.makedirs("photos", exist_ok=True)
            logger.info("–ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    await start_accounts()
    asyncio.create_task(cleanup_photos())
    logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–π –∏ —Ñ–æ—Ç–æ
    os.makedirs("sessions", exist_ok=True)
    os.makedirs("photos", exist_ok=True)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)