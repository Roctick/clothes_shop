from pyrogram import Client, filters
from pyrogram.types import Message
import asyncio
import logging
import time 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

api_id = 25709715
api_hash = "71342afcaef835c71a09a659b5561b95"
target_bot = "@StarsovEarnBot"

app = Client("my_account", api_id=api_id, api_hash=api_hash)

async def solve_captcha(message: Message):
    """–†–µ—à–∞–µ—Ç –∫–∞–ø—á—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        if "–∏–∑–æ–±—Ä–∞–∂–µ–Ω" in message.text.lower() and message.reply_markup:
            for row in message.reply_markup.inline_keyboard:
                for button in row:
                    if "üçé" in button.text or "—è–±–ª–æ–∫–æ" in button.text.lower():
                        await message.click(button.text)
                        logger.info("–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞!")
                        return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–ø—á–∏: {e}")
        return False

async def process_message(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞"""
    if "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å" in message.text:
        logger.info("–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: –ü–æ–¥–ø–∏—Å–∫–∞")
        if message.reply_markup:
            for row in message.reply_markup.inline_keyboard:
                for button in row:
                    if "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" in button.text:
                        await message.click(button.text)
                        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {button.text}")
                        await asyncio.sleep(15)
        return True

    elif "–∏–∑–æ–±—Ä–∞–∂–µ–Ω" in message.text.lower():
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞")
        return await solve_captcha(message)
    else:
        return False

async def process_subscriptions(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º: –ø–µ—Ä–µ—Ö–æ–¥ ‚Üí –ø–æ–¥–ø–∏—Å–∫–∞ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    try:
        if not message.reply_markup:
            return False

        # –®–∞–≥ 1: –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "üîé –ü–µ—Ä–µ–π—Ç–∏"
        join_button = None
        for row in message.reply_markup.inline_keyboard:
            for button in row:
                if "–ø–µ—Ä–µ–π—Ç–∏" in button.text.lower() and "üîé" in button.text:
                    join_button = button
                    break

        if not join_button or not hasattr(join_button, "url"):
            logger.warning("–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç URL")
            return False

        url = join_button.url
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É: {url}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
        if "t.me/" in url:
            clean_url = url.split("?")[0]
            target = clean_url.split("/")[-1]

            # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º start= (–Ω–∞–ø—Ä–∏–º–µ—Ä, t.me/StarsEarnRuBot?start=...)
            if "start=" in url:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä start
                start_param = url.split("start=")[-1]
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                await app.send_message(target, f"/start {start_param}")
                logger.info(f"–ë–æ—Ç {target} –∑–∞–ø—É—â–µ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {start_param}")
            else:
                # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤
                try:
                    await app.join_chat(target)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤: {target}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {str(e)[:50]}")
                    return False

        await asyncio.sleep(5)

        # –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        confirm_button = None
        for row in message.reply_markup.inline_keyboard:
            for button in row:
                if any(kw in button.text.lower() for kw in ["–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm"]):
                    confirm_button = button
                    break

        if confirm_button:
            await message.click(confirm_button.text)
            logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await asyncio.sleep(10)
            return True

        return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_subscriptions: {str(e)}")
        return False

@app.on_message(filters.bot & filters.private)
async def handle_bot_messages(client, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –±–æ—Ç–∞"""
    if message.from_user.username == target_bot.replace("@", ""):
        await process_message(message)


async def main_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    async with app:
        while True:
            try:
                logger.info("--- –ù–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω ---")
                
                # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
                await app.send_message(target_bot, "üíé –ó–∞–¥–∞–Ω–∏—è")
                logger.info("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                start_time = time.time()
                activity_detected = False
                block_detected = False
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
                while not block_detected:
                    activity_detected = False
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
                    async for message in app.get_chat_history(target_bot, limit=30):
                        msg_time = message.date.timestamp()
                        
                        # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã)
                        if msg_time < start_time - 120:  # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                            continue
                            
                        text = (message.text or "").lower()
                        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        
                        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
                        if any(kw in text for kw in ["—Å–æ–∂–∞–ª–µ–Ω–∏—é", "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"]):
                            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç")
                            block_detected = True
                            break
                            
                        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ö–∞–ø—á–∞
                        elif any(kw in text for kw in ["–∏–∑–æ–±—Ä–∞–∂–µ–Ω", "–≤—ã–±–µ—Ä–∏—Ç–µ"]):
                            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞")
                            await solve_captcha(message)
                            activity_detected = True
                            
                        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ó–∞–¥–∞–Ω–∏—è
                        elif any(kw in text for kw in ["–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å", "–ø–æ–¥–ø–∏—à–∏—Å—å", "–∑–∞–¥–∞–Ω–∏–µ"]):
                            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π...")
                            await process_subscriptions(message)
                            activity_detected = True
                            
                        # –õ—é–±–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                        else:
                            activity_detected = True  # –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                    if block_detected:
                        await asyncio.sleep(600)
                        break
                        
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if not activity_detected:
                        logger.warning("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç")
                        await asyncio.sleep(600)
                        break
                        
                    await asyncio.sleep(10)  # –£–º–µ–Ω—å—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
                
            except Exception as e:
                logger.error(f"–û–®–ò–ë–ö–ê: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç")
                await asyncio.sleep(600)

if __name__ == "__main__":
    app.run(main_loop())