import asyncio
import logging
import re
import random
import time
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import UserAlreadyParticipant, FloodWait, RPCError
from pyrogram.handlers import MessageHandler
import aiohttp
from pyrogram.types import Message, InlineKeyboardButton
from pyrogram.errors import UserAlreadyParticipant, FloodWait, RPCError, UserNotParticipant
from pyrogram.handlers import MessageHandler
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
RUNNING = True  # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
START_TIME = time.time()  # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
MAX_RUNTIME = 48 * 3600  # 48 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    filename='earn_bot.log',
    filemode='a',
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler())  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å 

class AccountWorker:
    def __init__(self, session_name, api_id, api_hash):
        self.session_name = session_name
        self.api_id = api_id
        self.api_hash = api_hash
        self.app = Client(session_name, api_id, api_hash)
        self.target_bot = "StarsovEarnBot"
        self.error_count = 0
        self.max_errors = 10
        self.http_session = None  # –°–µ—Å—Å–∏—è aiohttp
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.app.add_handler(MessageHandler(
            self.handle_bot_message, 
            filters.bot & filters.private
        ))

    async def safe_sleep(self, delay):
        while delay > 0 and RUNNING:
            chunk = min(delay, 5)
            await asyncio.sleep(chunk)
            delay -= chunk

    async def init_http_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP-—Å–µ—Å—Å–∏–∏"""
        if not self.http_session:
            self.http_session = aiohttp.ClientSession()

    async def close_http_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP-—Å–µ—Å—Å–∏–∏"""
        if self.http_session:
            await self.http_session.close()
            self.http_session = None

    async def open_flyer_link(self, url: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞ –∫ —Ü–µ–ª–µ–≤–æ–π —Å—Å—ã–ª–∫–µ"""
        try:
            await self.init_http_session()
            async with self.http_session.get(url) as response:
                if response.status == 200:
                    logger.info(f"[{self.session_name}] –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Å—ã–ª–∫–∞: {url}")
                else:
                    logger.warning(f"[{self.session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏: HTTP {response.status}")
        except Exception as e:
            logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    async def process_flyer_links(self, message: Message):
        """–ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ flyerservice –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            text = message.text or ""
            flyer_links = re.findall(r'https?://api\.flyerservice\.io[^\s]+', text)
            
            # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ –∫–Ω–æ–ø–∫–∞—Ö
            if message.reply_markup:
                for row in message.reply_markup.inline_keyboard:
                    for button in row:
                        if hasattr(button, "url") and button.url:
                            if re.match(r'https?://api\.flyerservice\.io', button.url):
                                flyer_links.append(button.url)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            for link in set(flyer_links):  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                await self.safe_sleep(random.uniform(0.5, 1.5))
                await self.open_flyer_link(link)
                await self.safe_sleep(1.0)
                
            return bool(flyer_links)
        except Exception as e:
            logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")
            return False
        
    
    async def add_bot_to_chat(self, message: Message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –≤ —á–∞—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
        try:
            logger.info(f"[{self.session_name}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞")
            
            # 1. –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞
            add_button = None
            if message.reply_markup and message.reply_markup.inline_keyboard:
                for row in message.reply_markup.inline_keyboard:
                    for button in row:
                        btn_text = button.text or ""
                        if any(kw in btn_text.lower() for kw in ["–¥–æ–±–∞–≤–∏—Ç—å", "–¥–æ–±–∞–≤—å—Ç–µ", "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å"]):
                            add_button = button
                            break
                    if add_button:
                        break
            
            if not add_button:
                logger.warning(f"[{self.session_name}] –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
            bot_username = None
            if isinstance(add_button, InlineKeyboardButton) and add_button.url:
                # –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username –±–æ—Ç–∞
                match = re.search(r't.me/(\w+)', add_button.url)
                if match:
                    bot_username = match.group(1)
            
            if not bot_username:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ username –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                match = re.search(r'@(\w+)', message.text or "")
                if match:
                    bot_username = match.group(1)
            
            if not bot_username:
                logger.warning(f"[{self.session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å username –±–æ—Ç–∞")
                return False

            # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç —É–∂–µ –≤ —á–∞—Ç
                try:
                    chat_member = await self.app.get_chat_member(message.chat.id, bot_username)
                    if chat_member:
                        logger.info(f"[{self.session_name}] –ë–æ—Ç @{bot_username} —É–∂–µ –≤ —á–∞—Ç–µ")
                        return True
                except UserNotParticipant:
                    pass
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞
                await self.app.add_chat_members(message.chat.id, bot_username)
                logger.info(f"[{self.session_name}] –ë–æ—Ç @{bot_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await self.safe_sleep(random.uniform(2.0, 4.0))
                return True
            except Exception as e:
                logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
                return False
            
        except Exception as e:
            logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
            return False

    async def safe_sleep(self, delay):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π sleep —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞ RUNNING"""
        while delay > 0 and RUNNING:
            chunk = min(delay, 5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
            await asyncio.sleep(chunk)
            delay -= chunk

    async def solve_captcha(self, message: Message):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å –∫–∞–ø—á —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
            await self.safe_sleep(random.uniform(1.0, 2.5))
            
            text_lower = message.text.lower()
            if not any(kw in text_lower for kw in ["–∏–∑–æ–±—Ä–∞–∂–µ–Ω", "–≤—ã–±–µ—Ä–∏—Ç–µ", "–Ω–∞–∂–º–∏—Ç–µ"]) or not message.reply_markup:
                return False

            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            TARGETS = {
                "–∫–ª—É–±–Ω–∏–∫": ("üçì", ["–∫–ª—É–±–Ω–∏–∫", "—è–≥–æ–¥"]),
                "—è–±–ª–æ–∫": ("üçé", ["—è–±–ª–æ–∫", "—è–±–ª"]),
                "–≤–∏—à–Ω": ("üçí", ["–≤–∏—à–Ω", "—á–µ—Ä–µ—à–Ω"]),
                "–±–∞–Ω–∞–Ω": ("üçå", ["–±–∞–Ω–∞–Ω"]),
                "–≤–∏–Ω–æ–≥—Ä–∞–¥": ("üçá", ["–≤–∏–Ω–æ–≥—Ä–∞–¥"]),
                "–∞—Ä–±—É–∑": ("üçâ", ["–∞—Ä–±—É–∑"]),
                "–ª–∏–º–æ–Ω": ("üçã", ["–ª–∏–º–æ–Ω"]),
                "–ø–µ—Ä—Å–∏–∫": ("üçë", ["–ø–µ—Ä—Å–∏–∫"]),
                "–≥—Ä—É—à": ("üçê", ["–≥—Ä—É—à"]),
                "–∞–ø–µ–ª—å—Å–∏–Ω": ("üçä", ["–∞–ø–µ–ª—å—Å–∏–Ω"]),
                "–ø–æ–º–∏–¥–æ—Ä": ("üçÖ", ["–ø–æ–º–∏–¥–æ—Ä", "—Ç–æ–º–∞—Ç"]),
                "–±–∞–∫–ª–∞–∂–∞–Ω": ("üçÜ", ["–±–∞–∫–ª–∞–∂–∞–Ω"]),
                "–∫–∞–ø—É—Å—Ç": ("ü•¨", ["–∫–∞–ø—É—Å—Ç"]),
                "—Å–∞–ª–∞—Ç": ("ü•¨", ["—Å–∞–ª–∞—Ç", "–ª–∞—Ç—É–∫"]),
                "–±—Ä–æ–∫–∫–æ–ª–∏": ("ü•¶", ["–±—Ä–æ–∫–∫–æ–ª–∏"]),
                "–º–æ—Ä–∫–æ–≤": ("ü•ï", ["–º–æ—Ä–∫–æ–≤"]),
                "–æ–≥—É—Ä–µ—Ü": ("ü•í", ["–æ–≥—É—Ä–µ—Ü"]),
                "–∫–∞—Ä—Ç–æ—à": ("ü•î", ["–∫–∞—Ä—Ç–æ—à", "–∫–∞—Ä—Ç–æ—Ñ–µ–ª"]),
                "–∞–≤–æ–∫–∞–¥–æ": ("ü•ë", ["–∞–≤–æ–∫–∞–¥–æ"]),
                "–∫—É–∫—É—Ä—É–∑": ("üåΩ", ["–∫—É–∫—É—Ä—É–∑", "–º–∞–∏—Å"]),
                "–ø–µ—Ä–µ—Ü": ("ü´ë", ["–ø–µ—Ä–µ—Ü", "–ø–µ—Ä—á"]),
                "—á–µ—Å–Ω–æ–∫": ("üßÑ", ["—á–µ—Å–Ω–æ–∫"]),
                "–ª—É–∫": ("üßÖ", ["–ª—É–∫"]),
                "–∞—Ä–∞—Ö–∏—Å": ("ü•ú", ["–∞—Ä–∞—Ö–∏—Å", "–æ—Ä–µ—Ö"]),
                "–∫–æ–∫–æ—Å": ("ü••", ["–∫–æ–∫–æ—Å"]),
                "–∫–∏–≤–∏": ("ü•ù", ["–∫–∏–≤–∏"]),
                "–º–∞–Ω–≥–æ": ("ü•≠", ["–º–∞–Ω–≥–æ"]),
                "—Ö–ª–µ–±": ("üçû", ["—Ö–ª–µ–±"]),
                "–∫—Ä—É–∞—Å–∞–Ω": ("ü•ê", ["–∫—Ä—É–∞—Å–∞–Ω"]),
                "—Å—ã—Ä": ("üßÄ", ["—Å—ã—Ä"]),
                "–±—É—Ä–≥–µ—Ä": ("üçî", ["–±—É—Ä–≥–µ—Ä"]),
                "–ø–∏—Ü—Ü–∞": ("üçï", ["–ø–∏—Ü—Ü–∞"]),
                "–ø–æ–Ω—á–∏–∫": ("üç©", ["–ø–æ–Ω—á–∏–∫"]),
                "–ø–µ—á–µ–Ω—å–µ": ("üç™", ["–ø–µ—á–µ–Ω—å–µ"]),
            }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–ø—á–∏
            target_key = next((k for k in TARGETS if k in text_lower), None)
            if not target_key:
                logger.warning(f"[{self.session_name}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –∫–∞–ø—á–µ: {message.text}")
                return False

            emoji, keywords = TARGETS[target_key]

            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É
            for row in message.reply_markup.inline_keyboard:
                for button in row:
                    btn_text = button.text or ""
                    btn_lower = btn_text.lower()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    if (emoji and emoji in btn_text) or any(kw in btn_lower for kw in keywords):
                        await message.click(button.text)
                        logger.info(f"[{self.session_name}] –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞: {btn_text}")
                        return True
                        
            logger.warning(f"[{self.session_name}] –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–ø—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        except Exception as e:
            logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏: {e}")
            return False

    async def join_by_invite_link(self, invite_link: str):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ"""
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
            await self.safe_sleep(random.uniform(1.5, 3.0))
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
            if "/+" in invite_link:
                invite_hash = invite_link.split("/+")[1].split("?")[0]
                try:
                    await self.app.join_chat(f"+{invite_hash}")
                    logger.info(f"[{self.session_name}] –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –ø–æ –∏–Ω–≤–∞–π—Ç—É: +{invite_hash}")
                    return True
                except UserAlreadyParticipant:
                    logger.info(f"[{self.session_name}] –£–∂–µ —É—á–∞—Å—Ç–≤—É–µ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
                    return True
                except Exception as e:
                    logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏: {e}")
                    
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ
            try:
                chat = await self.app.get_chat(invite_link)
                await self.app.join_chat(chat.id)
                logger.info(f"[{self.session_name}] –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ —á–µ—Ä–µ–∑ get_chat: {chat.title}")
                return True
            except UserAlreadyParticipant:
                logger.info(f"[{self.session_name}] –£–∂–µ —É—á–∞—Å—Ç–≤—É–µ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
                return True
            except Exception as e:
                logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ get_chat: {e}")
                
            return False
        except Exception as e:
            logger.error(f"[{self.session_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏: {e}")
            return False

    async def process_task(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        try:
            # 1. –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞
            join_button = None
            if message.reply_markup and message.reply_markup.inline_keyboard:
                for row in message.reply_markup.inline_keyboard:
                    for button in row:
                        btn_text = button.text or ""
                        if "–ø–µ—Ä–µ–π—Ç–∏" in btn_text.lower() and "üîé" in btn_text:
                            join_button = button
                            break
                    if join_button:
                        break
            
            if not join_button or not hasattr(join_button, "url"):
                logger.warning(f"[{self.session_name}] –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            url = join_button.url
            logger.info(f"[{self.session_name}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏: {url}")

            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Å—ã–ª–æ–∫
            if "start=" in url:  # –ë–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                match = re.search(r"t.me/(\w+)\?start=(\w+)", url)
                if match:
                    await self.safe_sleep(random.uniform(1.0, 2.0))
                    await self.app.send_message(match.group(1), f"/start {match.group(2)}")
                    logger.info(f"[{self.session_name}] –ó–∞–ø—É—â–µ–Ω –±–æ—Ç: {match.group(1)} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º {match.group(2)}")
                else:
                    logger.warning(f"[{self.session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞: {url}")
            else:
                # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                await self.join_by_invite_link(url)

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await self.safe_sleep(random.uniform(3.0, 5.0))

            # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            confirm_button = None
            if message.reply_markup and message.reply_markup.inline_keyboard:
                for row in message.reply_markup.inline_keyboard:
                    for button in row:
                        btn_text = button.text or ""
                        if any(kw in btn_text.lower() for kw in ["–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å"]):
                            confirm_button = button
                            break
                    if confirm_button:
                        break
            
            if confirm_button:
                await self.safe_sleep(random.uniform(1.0, 2.0))
                await message.click(confirm_button.text)
                logger.info(f"[{self.session_name}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.warning(f"[{self.session_name}] –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
        except Exception as e:
            logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            return False
        
    async def start_bot(self, message: Message):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Å—ã–ª–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
            await self.safe_sleep(random.uniform(1.0, 2.5))
            
            # 1. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            bot_links = []
            text = message.text or ""
            
            # –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            text_links = re.findall(r'https?://t\.me/(\w+)(?:\?start=(\w+))?', text)
            for match in text_links:
                bot_links.append({
                    "username": match[0],
                    "param": match[1] if len(match) > 1 else None
                })
            
            # –ü–æ–∏—Å–∫ –≤ –∫–Ω–æ–ø–∫–∞—Ö
            if message.reply_markup:
                for row in message.reply_markup.inline_keyboard:
                    for button in row:
                        if hasattr(button, "url") and button.url:
                            match = re.search(r't\.me/(\w+)(?:\?start=(\w+))?', button.url)
                            if match:
                                bot_links.append({
                                    "username": match.group(1),
                                    "param": match.group(2) if match.lastindex > 1 else None
                                })
            
            if not bot_links:
                logger.warning(f"[{self.session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞")
                return False
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
            for bot_link in bot_links:
                username = bot_link["username"]
                param = bot_link["param"]
                
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
                    command = f"/start {param}" if param else "/start"
                    
                    logger.info(f"[{self.session_name}] –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞: @{username} —Å –∫–æ–º–∞–Ω–¥–æ–π '{command}'")
                    await self.app.send_message(username, command)
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
                    await self.safe_sleep(random.uniform(1.5, 3.0))
                    
                except RPCError as e:
                    logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ @{username}: {e}")
            
            # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            confirm_button = None
            if message.reply_markup:
                for row in message.reply_markup.inline_keyboard:
                    for button in row:
                        btn_text = button.text or ""
                        if any(kw in btn_text.lower() for kw in ["–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–≥–æ—Ç–æ–≤–æ", "—è –∑–∞–ø—É—Å—Ç–∏–ª"]):
                            confirm_button = button
                            break
                    if confirm_button:
                        break
            
            if confirm_button:
                await self.safe_sleep(random.uniform(2.0, 4.0))
                await message.click(confirm_button.text)
                logger.info(f"[{self.session_name}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.warning(f"[{self.session_name}] –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            return True
            
        except RPCError as e:
            logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            return False
        except Exception as e:
            logger.exception(f"[{self.session_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ start_bot: {e}")
            return False

    async def handle_bot_message(self, client, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not message.from_user or message.from_user.username != self.target_bot:
                return

            text = message.text or ""
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ flyer-—Å—Å—ã–ª–æ–∫ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
            if await self.process_flyer_links(message):
                return
            elif "–∑–∞–ø—É—Å—Ç–∏—Ç–µ" in text.lower():
                await self.start_bot(message)
            elif "–¥–æ–±–∞–≤—å—Ç–µ" in text.lower():
                await self.add_bot_to_chat(message)
            elif any(kw in text.lower() for kw in ["–∏–∑–æ–±—Ä–∞–∂–µ–Ω", "–≤—ã–±–µ—Ä–∏—Ç–µ", "–Ω–∞–∂–º–∏—Ç–µ"]):
                await self.solve_captcha(message)
            elif any(kw in text.lower() for kw in ["–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å", "–∑–∞–¥–∞–Ω–∏–µ"]):
                await self.process_task(message)
        except Exception as e:
            logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    async def main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        async with self.app:
            logger.info(f"[{self.session_name}] –ê–∫–∫–∞—É–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
            while RUNNING and (time.time() - START_TIME) < MAX_RUNTIME:
                try:
                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                    await self.safe_sleep(random.uniform(1, 10))
                    
                    # –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–∏–π
                    await self.app.send_message(self.target_bot, "üíé –ó–∞–¥–∞–Ω–∏—è")
                    
                    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    await self.safe_sleep(random.uniform(10, 20))
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
                    has_tasks = False
                    async for msg in self.app.get_chat_history(self.target_bot, limit=5):
                        if not RUNNING or (time.time() - START_TIME) >= MAX_RUNTIME:
                            break
                            
                        if not msg.text:
                            continue
                            
                        msg_text = msg.text.lower()
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        if any(kw in msg_text for kw in ["—Å–æ–∂–∞–ª–µ–Ω–∏—é", "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω"]):
                            logger.warning(f"[{self.session_name}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞! –ü–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç")
                            await self.safe_sleep(60)
                            continue
                            
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π
                        if "–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å" in msg_text:
                            has_tasks = True
                            await self.process_task(msg)
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                    wait_time = random.randint(5, 7) if not has_tasks else random.randint(30, 60)
                    logger.info(f"[{self.session_name}] –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫.")
                    await self.safe_sleep(wait_time)
                    await self.app.send_message(self.target_bot, "üíé –ó–∞–¥–∞–Ω–∏—è")
                    
                    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    self.error_count = max(0, self.error_count - 1)
                    
                except FloodWait as e:
                    wait_time = e.value + random.randint(5, 15)
                    logger.warning(f"[{self.session_name}] –û–∂–∏–¥–∞–Ω–∏–µ FloodWait: {wait_time} —Å–µ–∫.")
                    await self.safe_sleep(wait_time)
                except RPCError as e:
                    self.error_count += 1
                    logger.error(f"[{self.session_name}] RPCError: {e}. –û—à–∏–±–∫–∞ #{self.error_count}")
                    
                    if self.error_count > self.max_errors:
                        logger.warning(f"[{self.session_name}] –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫! –ü–∞—É–∑–∞ 1 —á–∞—Å")
                        await self.safe_sleep(360)
                        self.error_count = 0
                    else:
                        await self.safe_sleep(60)
                except Exception as e:
                    self.error_count += 1
                    logger.error(f"[{self.session_name}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –û—à–∏–±–∫–∞ #{self.error_count}")
                    await self.safe_sleep(60)
                finally:
                    await self.close_http_session()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é
            
            logger.info(f"[{self.session_name}] –†–∞–±–æ—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def account_supervisor(worker):
    """–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–±–æ—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
    while RUNNING and (time.time() - START_TIME) < MAX_RUNTIME:
        try:
            await worker.main_loop()
        except Exception as e:
            logger.error(f"[{worker.session_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫.")
            await asyncio.sleep(60)
    
    logger.info(f"[{worker.session_name}] –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    global RUNNING
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
    accounts = [
        {"session": "account_4", "api_id": 24992059, "api_hash": "cc5be678c5ca65dab8487b45d89f2fee"}
        # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 174 –∞–∫–∫–∞—É–Ω—Ç–∞
    ]

    workers = []
    tasks = []
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –∏ –∑–∞–¥–∞—á–∏
    for acc in accounts:
        worker = AccountWorker(
            session_name=acc["session"],
            api_id=acc["api_id"],
            api_hash=acc["api_hash"]
        )
        workers.append(worker)
        task = asyncio.create_task(account_supervisor(worker))
        tasks.append(task)
        await asyncio.sleep(0.5)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤

    # –†–∞–±–æ—Ç–∞–µ–º 48 —á–∞—Å–æ–≤
    logger.info(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –†–∞–±–æ—Ç–∞–µ–º 48 —á–∞—Å–æ–≤.")
    await asyncio.sleep(MAX_RUNTIME)
    
    # –ü–ª–∞–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    RUNNING = False
    
    # –î–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await asyncio.sleep(30)
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    for task in tasks:
        task.cancel()
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await asyncio.gather(*tasks, return_exceptions=True)
    logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        RUNNING = False
